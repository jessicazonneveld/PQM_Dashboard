{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup","text":"<p>To start editing the web application open:</p> <ul> <li><code>app.py</code> file located in the NpFast folder using VS Code.</li> <li><code>BlazorApp2.sln</code> file located in the NpWeb folder using Microsoft Visual Studio.</li> </ul>"},{"location":"#how-to-start-editing-pqm-dashboard-website","title":"How to start editing PQM Dashboard Website","text":"<code>app.py</code><code>BlazorApp2.sln</code> <p>In the terminal, type below to turn local server on <pre><code>fastapi dev .\\app.py \n</code></pre></p> <p> To view/build the website, press the https button. </p> <p> After any small changes are made, press the fire icon to \"hot reload\" the page and see the changes To close down website, press the stop icon. </p> <p>Note</p> <p>To view larger changes made, close website down, then build website again!</p>"},{"location":"app.py/","title":"App.py","text":""},{"location":"app.py/#apppy-file","title":"app.py file","text":"<p>Walk through of back-end file</p> <p>The start of the python file contains parts of common functions code when initial trials were taken and kept in use.</p> <pre><code>@app.get(\"/\")       # test\n\n@app.get(\"/api/image1\") # brings in images through back-end to front-end \n@app.get(\"/api/image2\") # after investigation, there is a way to display images just through front-end\n@app.get(\"/api/image3\")\n\n\n### Energex\n@app.get(\"/excard/{site_id}\")   # gets monitor information from energex excel spreadsheet\n@app.get(\"/exsite\")             # gets voltage and current data from piwebapi for energex\n\n### Ergon\n@app.get(\"/ergoncard/{site_id}\")    # gets monitor information from ergon excel spreadsheet\n@app.get(\"/ergonsite\")              # gets voltage and current data from piwebapi for ergon\n\n### MONTHLY REPORTS\n# Option 1 - runs the python script in back-end\n@app.get(\"/monthlyreport\")\n# Option 2 - brings previously run python script to front-end (currently selected process)\n@app.get(\"/monthlyreportrequest\")\n\n### BATCH ANALYSIS\n# start of back-end of batch analysis request\n\n@app.get(\"/exsitegraphs\")   # gets data from energex PQM graphics dashboard x4 graphs (THD, reactive, active and phase angle)\n</code></pre>"},{"location":"myapiservice.cs/","title":"Myapiservice.cs","text":""},{"location":"myapiservice.cs/#myapiservicecs","title":"MyApiService.cs","text":"<p>Follows the same layout as <code>app.py</code></p> <pre><code>###Energex\n# gets monitor information from energex excel spreadsheet\npublic async Task&lt;SiteNetworkData&gt; GetTestCardAsync(string site)\n\n# after investigation, there is a way to display images just through front-end\npublic async Task&lt;List&lt;MonitorData&gt;&gt; GetMDAsync(string site, DateTime? start, DateTime? end)\n\n# gets data from energex PQM graphics dashboard x4 graphs (THD, reactive, active and phase angle)\npublic async Task&lt;List&lt;GraphicsData&gt;&gt; GetGraphDataAsync(string site, DateTime? start, DateTime? end)\n\n###Ergon\n# gets monitor information from ergon excel spreadsheet\npublic async Task&lt;SiteNetworkData&gt; GetErgonCardAsync(string site)\n\n# gets voltage and current data from piwebapi for ergon\npublic async Task&lt;List&lt;MonitorData&gt;&gt; GetErgonMDAsync(string site, DateTime? start, DateTime? end)\n\n###Monthly reports option 2:\n# Option 2 - brings previously run python script to front-end (currently selected process)\npublic async Task&lt;HttpResponseMessage&gt; GetExcelFileAsync(string analysisMonth)\n\n###Batch analysis\npublic async Task&lt;string&gt; GetBacthAnalysisAsync(DateTime? start, DateTime? end)\n</code></pre>"},{"location":"project-layout/","title":"Project Layout","text":"<p>Here outlines the IMPORTANT contents within folders NpWeb and NpFast (all other documents are needed however never edited)</p>"},{"location":"project-layout/#npfast","title":"NpFast","text":"<pre><code>.venv/                      # virtual environment\n\nBatch Analysis Input/       # holds batch analysis input files for testing\n\nimages\n\nImportant Dashboard Files/  # holds excel files for Energex, Ergon and EOLV containing monitor information\n\nMonthly Reports/            # location for the monthly reports previously run\n\napp.py                      # location to run back-end when testing\nBatchAnalysis.py\nCommon_Functions.py\nConstant.py\nEnergexDashbaordScript.py\nMonthlyReportScript.py\ntest.py                     # test file to make sure app.py will perform the right tasks\n</code></pre>"},{"location":"project-layout/#npweb","title":"NpWeb","text":"<pre><code>Layout/\n    MainLayout.razor        # provides simple outline layer\n    NavMenu.razor           # primary navigation menu\n\nPages/\n    Assess.razor            # future development for assess neutral integrity\n    Chart.razor             # test page for plotting charts\n    Check.razor             # future development for check data availability\n    Counter.razor           # test page when web application was set up\n    Grid.razor              # main front page \n    Home.razor              # initial set up test page\n    Reports.razor           # main page for report developing\n    Weather.razor           # test page\n\nwwwroot/\n    css                     # extra design\n    js                      # currently holds monthly report download capabilities\n    sample-data             # holds any data in the form of .json to test with\n    combined_logo.png       # compnay logo\n    favicon.png             # supplied icon in web tab (changed to company logo)\n    appsettings.json        # directs what server you are working on\n\n_Imports.razor              # includes what packages Blazor is using\nApp.razor                   # routes the data to a functioning web application\nBlazorApp2.sln              # PQM Dashboard solution in which you open to start editing the web application\nMyApiService.cs             # file that connects to python back end, bringing in python outputs to front end as variables\n</code></pre> <p>Note</p> <p>To view the test pages, build the website on Blazor, then add the page URL to the end of the current domain.</p> <p>Example:</p> <p>If you are wanting to view edits in Weather.razor, confirm the @page name is \"/weather\" and add to the end of the URL. The following changes should be made.</p> <p>Original domain: https://localhost:7124/</p> <p>New domain: https://localhost:7124/weather</p> <p>Danger</p> <p>For appsettings.json:</p> <p>When sending off for deployment (Max), have this only this line uncommented: \"https://sbnswts45.services.local:8005/\"</p> <p>When editing on local host, have this only this line uncommented: \"http://localhost:8000\"</p>"},{"location":"testing/","title":"Test Front-end and Back-end","text":""},{"location":"testing/#back-end","title":"Back-end","text":"<p>To test the back end and make sure the correct data is received in the right format, copy this URL into google to view the documentation:     <pre><code>http://localhost:8000/docs\n</code></pre></p>"},{"location":"testing/#front-end","title":"Front-end","text":"<p>The front end uses the URL https://localhost:7124/ when you build website through Blazor.</p> <ol> <li>Call the back-end api data through MyApiService.cs to store as variable</li> <li>Call the awaitable just created into respective page you are wanting to place the information</li> </ol> <p>Warning</p> <p>Error codes to look out for in VS Code terminal when testing the front end</p> <p>200: this is a successful request</p> <p>400, 404, 500: anything other than 200 is an invalid request where there may be something wrong between the front-end requesting for information / data from the back-end</p>"}]}